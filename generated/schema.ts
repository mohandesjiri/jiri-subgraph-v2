// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IndexFund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexFund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save IndexFund entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("IndexFund", id.toString(), this);
    }
  }

  static load(id: string): IndexFund | null {
    return changetype<IndexFund | null>(store.get("IndexFund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get portfolio(): Array<string> {
    let value = this.get("portfolio");
    return value!.toStringArray();
  }

  set portfolio(value: Array<string>) {
    this.set("portfolio", Value.fromStringArray(value));
  }
}

export class IndexFundAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("current", Value.fromBigInt(BigInt.zero()));
    this.set("ideal", Value.fromBigInt(BigInt.zero()));
    this.set("indexFund", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexFundAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save IndexFundAsset entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("IndexFundAsset", id.toString(), this);
    }
  }

  static load(id: string): IndexFundAsset | null {
    return changetype<IndexFundAsset | null>(store.get("IndexFundAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get current(): BigInt {
    let value = this.get("current");
    return value!.toBigInt();
  }

  set current(value: BigInt) {
    this.set("current", Value.fromBigInt(value));
  }

  get ideal(): BigInt {
    let value = this.get("ideal");
    return value!.toBigInt();
  }

  set ideal(value: BigInt) {
    this.set("ideal", Value.fromBigInt(value));
  }

  get indexFund(): string {
    let value = this.get("indexFund");
    return value!.toString();
  }

  set indexFund(value: string) {
    this.set("indexFund", Value.fromString(value));
  }
}
